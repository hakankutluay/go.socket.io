name: Go Test and Lint

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  actions: read

jobs:

  test:
    name: Test on Go ${{ matrix.go-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.18', '1.19', '1.20', '1.21', '1.22','1.23', 'stable']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Go vet
      run: go vet -v ./...

    - name: Test jsoniter
      working-directory: socket.io/v5/parser/default/jsoniter
      run: go test -v ./...  

    - name: Go vet jsoniter
      working-directory: socket.io/v5/parser/default/jsoniter
      run: go vet -v ./...

    - name: Go vet examples
      working-directory: examples
      run: go vet -v ./...

  test-coverage: 
    name: Collect code test coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Cache Go modules and gosec
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-stable-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-stable-

      - name: Install dependencies
        run: go mod download

      - name: Run tests for main project
        run: go test `go list ./...|grep -v mocks` -coverprofile=coverage.out

      - name: Run tests for jsoniter
        working-directory: socket.io/v5/parser/default/jsoniter
        run: go test `go list ./...|grep -v mocks` -coverprofile=../../../../../coverage.payloadparser.jsoniter.out

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            ./coverage.out
            ./coverage.payloadparser.jsoniter.out
          flags: unittests
          fail_ci_if_error: true

      - name: Check coverage
        run: |
          total_coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$total_coverage < 80" | bc -l) )); then
            echo "Code coverage is below 80%"
            exit 1
          fi
          total_coverage=$(go tool cover -func=coverage.jsoniter.out | grep total | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$total_coverage < 80" | bc -l) )); then
            echo "Code coverage is below 80%"
            exit 1
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
        check-latest: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

    - name: Run golangci-lint examples
      uses: golangci/golangci-lint-action@v4
      with:
        working-directory: examples
        version: latest
        args: --timeout=5m

    - name: Run golangci-lint jsoniter
      uses: golangci/golangci-lint-action@v4
      with:
        working-directory: socket.io/v5/parser/default/jsoniter
        version: latest
        args: --timeout=5m                

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'
          check-latest: true

      - name: Cache Go modules and gosec
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-gosec
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install gosec
        run: |
          if ! command -v gosec &> /dev/null; then
            go install github.com/securego/gosec/v2/cmd/gosec@latest
          fi

      - name: Run gosec on main project
        run: |
          go mod download
          gosec -fmt=sarif -out=gosec.main.sarif -exclude-dir=socket.io/v5/parser/default/jsoniter -exclude-dir=examples ./...
      - name: Run gosec on examples
        run: |
          cd examples
          go mod download
          gosec -fmt=sarif -out=../gosec.examples.sarif ./...
      
      - name: Run gosec on jsoniter parser
        run: |
          cd socket.io/v5/parser/default/jsoniter
          go mod download
          gosec -fmt=sarif -out=../../../../../gosec.payloayparser.jsoniter.sarif ./...    

      - name: Upload SARIF file
        if: github.event_name != 'pull_request' && github.actor != 'nektos/act'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./

      - name: Display SARIF results
        if: github.actor == 'nektos/act'
        run: cat gosec.*.sarif
  
  vuln-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'
          check-latest: true

      - name: Cache Go modules and gosec
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-gosec
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install govulncheck
        run: |
          if ! command -v govulncheck &> /dev/null; then
            go install golang.org/x/vuln/cmd/govulncheck@latest
          fi

      - name: Run govulncheck on main project
        run: |
          go mod download
          govulncheck ./...

      - name: Run govulncheck on examples
        run: |
          cd examples
          go mod download
          govulncheck ./...
      
      - name: Run govulncheck on jsoniter parser
        run: |
          cd socket.io/v5/parser/default/jsoniter
          go mod download
          govulncheck ./...

// Code generated by MockGen. DO NOT EDIT.
// Source: dep.go

// Package mock_socketio_v5_parser_default is a generated GoMock package.
package mock_socketio_v5_parser_default

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	socketio_v5 "github.com/maldikhan/go.socket.io/socket.io/v5"
)

// MockPayloadParser is a mock of PayloadParser interface.
type MockPayloadParser struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadParserMockRecorder
}

// MockPayloadParserMockRecorder is the mock recorder for MockPayloadParser.
type MockPayloadParserMockRecorder struct {
	mock *MockPayloadParser
}

// NewMockPayloadParser creates a new mock instance.
func NewMockPayloadParser(ctrl *gomock.Controller) *MockPayloadParser {
	mock := &MockPayloadParser{ctrl: ctrl}
	mock.recorder = &MockPayloadParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadParser) EXPECT() *MockPayloadParserMockRecorder {
	return m.recorder
}

// ParseEvent mocks base method.
func (m *MockPayloadParser) ParseEvent(data []byte, emptyEvent bool) (*socketio_v5.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseEvent", data, emptyEvent)
	ret0, _ := ret[0].(*socketio_v5.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEvent indicates an expected call of ParseEvent.
func (mr *MockPayloadParserMockRecorder) ParseEvent(data, emptyEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEvent", reflect.TypeOf((*MockPayloadParser)(nil).ParseEvent), data, emptyEvent)
}

// WrapCallback mocks base method.
func (m *MockPayloadParser) WrapCallback(callback interface{}) func([]interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapCallback", callback)
	ret0, _ := ret[0].(func([]interface{}))
	return ret0
}

// WrapCallback indicates an expected call of WrapCallback.
func (mr *MockPayloadParserMockRecorder) WrapCallback(callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapCallback", reflect.TypeOf((*MockPayloadParser)(nil).WrapCallback), callback)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}
